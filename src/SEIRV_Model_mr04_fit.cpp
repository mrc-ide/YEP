// Generated by dust2 (version 0.3.24) - do not edit

// Generated by odin2 (version 0.3.34) - do not edit
#include <dust2/common.hpp>
// [[dust2::class(SEIRV_Model_mr04_fit)]]
// [[dust2::time_type(discrete)]]
// [[dust2::has_compare()]]
// [[dust2::parameter(time_inc, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(n_r, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(region_index_sero, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(region_index_case, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(sero_regions, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(case_regions, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(n_env_vars, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(env_covar_values, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(log_FOI_coeffs, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(log_R0_coeffs, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(n_sero_pts, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(n_case_pts, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(t_incubation, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(t_latent, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(t_infectious, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(N_age, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(vacc_rate_daily, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(vaccine_efficacy, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(sero_vc_factor, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(sia_min, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(sia_max, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(p_severe_inf, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(p_death_severe_inf, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(p_rep_severe, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(p_rep_death, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(year0, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(S_0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(E_0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(I_0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(R_0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(V_0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(dP1_all, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(dP2_all, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(n_years, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(n_t_pts, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
class SEIRV_Model_mr04_fit {
public:
  SEIRV_Model_mr04_fit() = delete;
  using real_type = double;
  using rng_state_type = monty::random::generator<real_type>;
  struct shared_state {
    struct odin_internals_type {
      struct {
        dust2::packing state;
      } packing;
      struct {
        std::array<size_t, 17> state;
      } offset;
    } odin;
    struct dim_type {
      dust2::array::dimensions<2> S;
      dust2::array::dimensions<2> E;
      dust2::array::dimensions<2> I;
      dust2::array::dimensions<2> R;
      dust2::array::dimensions<2> V;
      dust2::array::dimensions<2> R_cu;
      dust2::array::dimensions<2> SEIR_cu;
      dust2::array::dimensions<2> V_cu;
      dust2::array::dimensions<2> infs_cu;
      dust2::array::dimensions<2> R_an;
      dust2::array::dimensions<2> SEIR_an;
      dust2::array::dimensions<2> V_an;
      dust2::array::dimensions<2> infs_an;
      dust2::array::dimensions<1> output_sero;
      dust2::array::dimensions<1> output_case;
      dust2::array::dimensions<2> FOI_components;
      dust2::array::dimensions<2> R0_components;
      dust2::array::dimensions<1> beta;
      dust2::array::dimensions<1> FOI_spillover;
      dust2::array::dimensions<1> R0;
      dust2::array::dimensions<1> FOI_sum;
      dust2::array::dimensions<2> dP1;
      dust2::array::dimensions<2> dP2;
      dust2::array::dimensions<2> E_new;
      dust2::array::dimensions<2> I_new;
      dust2::array::dimensions<2> R_new;
      dust2::array::dimensions<2> P_nV;
      dust2::array::dimensions<2> inv_P_nV;
      dust2::array::dimensions<2> P;
      dust2::array::dimensions<1> P_tot;
      dust2::array::dimensions<2> inv_P;
      dust2::array::dimensions<2> vacc_rate;
      dust2::array::dimensions<2> region_index_sero;
      dust2::array::dimensions<2> region_index_case;
      dust2::array::dimensions<1> sero_regions;
      dust2::array::dimensions<1> case_regions;
      dust2::array::dimensions<3> env_covar_values;
      dust2::array::dimensions<1> log_FOI_coeffs;
      dust2::array::dimensions<1> log_R0_coeffs;
      dust2::array::dimensions<2> S_0;
      dust2::array::dimensions<2> E_0;
      dust2::array::dimensions<2> I_0;
      dust2::array::dimensions<2> R_0;
      dust2::array::dimensions<2> V_0;
      dust2::array::dimensions<3> dP1_all;
      dust2::array::dimensions<3> dP2_all;
      dust2::array::dimensions<3> vacc_rate_daily;
      dust2::array::dimensions<1> sero_vc_factor;
      dust2::array::dimensions<1> sia_min;
      dust2::array::dimensions<1> sia_max;
      dust2::array::dimensions<1> obs_sero_positives;
      dust2::array::dimensions<1> obs_sero_samples;
      dust2::array::dimensions<1> obs_case_values;
      dust2::array::dimensions<1> case_population;
    } dim;
    real_type time_inc;
    int n_r;
    int n_env_vars;
    int n_sero_pts;
    int n_case_pts;
    real_type t_incubation;
    real_type t_latent;
    real_type t_infectious;
    int N_age;
    real_type vaccine_efficacy;
    real_type p_severe_inf;
    real_type p_death_severe_inf;
    real_type p_rep_severe;
    real_type p_rep_death;
    real_type year0;
    int n_years;
    int n_t_pts;
    real_type Pmin;
    real_type FOI_max;
    real_type rate1;
    real_type rate2;
    real_type p_rep;
    std::vector<real_type> region_index_sero;
    std::vector<real_type> region_index_case;
    std::vector<real_type> sero_regions;
    std::vector<real_type> case_regions;
    std::vector<real_type> env_covar_values;
    std::vector<real_type> log_FOI_coeffs;
    std::vector<real_type> log_R0_coeffs;
    std::vector<real_type> vacc_rate_daily;
    std::vector<real_type> sero_vc_factor;
    std::vector<real_type> sia_min;
    std::vector<real_type> sia_max;
    std::vector<real_type> S_0;
    std::vector<real_type> E_0;
    std::vector<real_type> I_0;
    std::vector<real_type> R_0;
    std::vector<real_type> V_0;
    std::vector<real_type> dP1_all;
    std::vector<real_type> dP2_all;
  };
  struct internal_state {
    std::vector<real_type> I_new;
    std::vector<real_type> R_new;
    std::vector<real_type> P_nV;
    std::vector<real_type> FOI_components;
    std::vector<real_type> R0_components;
    std::vector<real_type> dP1;
    std::vector<real_type> dP2;
    std::vector<real_type> inv_P_nV;
    std::vector<real_type> P;
    std::vector<real_type> FOI_spillover;
    std::vector<real_type> R0;
    std::vector<real_type> P_tot;
    std::vector<real_type> inv_P;
    std::vector<real_type> vacc_rate;
    std::vector<real_type> beta;
    std::vector<real_type> FOI_sum;
    std::vector<real_type> E_new;
  };
  struct data_type {
    std::vector<real_type> obs_sero_positives;
    std::vector<real_type> obs_sero_samples;
    std::vector<real_type> obs_case_values;
    std::vector<real_type> case_population;
  };
  static dust2::packing packing_state(const shared_state& shared) {
    return shared.odin.packing.state;
  }
  static shared_state build_shared(cpp11::list parameters) {
    shared_state::dim_type dim;
    const real_type time_inc = dust2::r::read_real(parameters, "time_inc");
    const int n_r = dust2::r::read_int(parameters, "n_r");
    const int n_env_vars = dust2::r::read_int(parameters, "n_env_vars");
    const int n_sero_pts = dust2::r::read_int(parameters, "n_sero_pts");
    const int n_case_pts = dust2::r::read_int(parameters, "n_case_pts");
    const real_type t_incubation = dust2::r::read_real(parameters, "t_incubation");
    const real_type t_latent = dust2::r::read_real(parameters, "t_latent");
    const real_type t_infectious = dust2::r::read_real(parameters, "t_infectious");
    const int N_age = dust2::r::read_int(parameters, "N_age");
    const real_type vaccine_efficacy = dust2::r::read_real(parameters, "vaccine_efficacy");
    const real_type p_severe_inf = dust2::r::read_real(parameters, "p_severe_inf");
    const real_type p_death_severe_inf = dust2::r::read_real(parameters, "p_death_severe_inf");
    const real_type p_rep_severe = dust2::r::read_real(parameters, "p_rep_severe");
    const real_type p_rep_death = dust2::r::read_real(parameters, "p_rep_death");
    const real_type year0 = dust2::r::read_real(parameters, "year0");
    const int n_years = dust2::r::read_int(parameters, "n_years");
    const int n_t_pts = dust2::r::read_int(parameters, "n_t_pts");
    const real_type Pmin = static_cast<real_type>(1e-99);
    const real_type FOI_max = 1;
    const real_type rate1 = time_inc / (t_incubation + t_latent);
    const real_type rate2 = time_inc / t_infectious;
    const real_type p_rep = p_severe_inf * ((p_death_severe_inf * p_rep_death) + ((1 - p_death_severe_inf) * p_rep_severe));
    dim.S.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.E.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.I.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.R.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.V.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.R_cu.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.SEIR_cu.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.V_cu.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.infs_cu.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.R_an.set({static_cast<size_t>(n_sero_pts), static_cast<size_t>(n_r)});
    dim.SEIR_an.set({static_cast<size_t>(n_sero_pts), static_cast<size_t>(n_r)});
    dim.V_an.set({static_cast<size_t>(n_sero_pts), static_cast<size_t>(n_r)});
    dim.infs_an.set({static_cast<size_t>(n_case_pts), static_cast<size_t>(n_r)});
    dim.output_sero.set({static_cast<size_t>(n_sero_pts)});
    dim.output_case.set({static_cast<size_t>(n_case_pts)});
    dim.FOI_components.set({static_cast<size_t>(n_env_vars), static_cast<size_t>(n_r)});
    dim.R0_components.set({static_cast<size_t>(n_env_vars), static_cast<size_t>(n_r)});
    dim.beta.set({static_cast<size_t>(n_r)});
    dim.FOI_spillover.set({static_cast<size_t>(n_r)});
    dim.R0.set({static_cast<size_t>(n_r)});
    dim.FOI_sum.set({static_cast<size_t>(n_r)});
    dim.dP1.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.dP2.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.E_new.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.I_new.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.R_new.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.P_nV.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.inv_P_nV.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.P.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.P_tot.set({static_cast<size_t>(n_r)});
    dim.inv_P.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.vacc_rate.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.region_index_sero.set({static_cast<size_t>(n_sero_pts), static_cast<size_t>(n_r)});
    dim.region_index_case.set({static_cast<size_t>(n_case_pts), static_cast<size_t>(n_r)});
    dim.sero_regions.set({static_cast<size_t>(n_r)});
    dim.case_regions.set({static_cast<size_t>(n_r)});
    dim.env_covar_values.set({static_cast<size_t>(n_env_vars), static_cast<size_t>(n_r), static_cast<size_t>(n_t_pts)});
    dim.log_FOI_coeffs.set({static_cast<size_t>(n_env_vars)});
    dim.log_R0_coeffs.set({static_cast<size_t>(n_env_vars)});
    dim.S_0.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.E_0.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.I_0.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.R_0.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.V_0.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age)});
    dim.dP1_all.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age), static_cast<size_t>(n_years)});
    dim.dP2_all.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age), static_cast<size_t>(n_years)});
    dim.vacc_rate_daily.set({static_cast<size_t>(n_r), static_cast<size_t>(N_age), static_cast<size_t>(n_years)});
    dim.sero_vc_factor.set({static_cast<size_t>(n_sero_pts)});
    dim.sia_min.set({static_cast<size_t>(n_sero_pts)});
    dim.sia_max.set({static_cast<size_t>(n_sero_pts)});
    dim.obs_sero_positives.set({static_cast<size_t>(n_sero_pts)});
    dim.obs_sero_samples.set({static_cast<size_t>(n_sero_pts)});
    dim.obs_case_values.set({static_cast<size_t>(n_case_pts)});
    dim.case_population.set({static_cast<size_t>(n_case_pts)});
    std::vector<real_type> region_index_sero(dim.region_index_sero.size);
    dust2::r::read_real_array(parameters, dim.region_index_sero, region_index_sero.data(), "region_index_sero", true);
    std::vector<real_type> region_index_case(dim.region_index_case.size);
    dust2::r::read_real_array(parameters, dim.region_index_case, region_index_case.data(), "region_index_case", true);
    std::vector<real_type> sero_regions(dim.sero_regions.size);
    dust2::r::read_real_array(parameters, dim.sero_regions, sero_regions.data(), "sero_regions", true);
    std::vector<real_type> case_regions(dim.case_regions.size);
    dust2::r::read_real_array(parameters, dim.case_regions, case_regions.data(), "case_regions", true);
    std::vector<real_type> env_covar_values(dim.env_covar_values.size);
    dust2::r::read_real_array(parameters, dim.env_covar_values, env_covar_values.data(), "env_covar_values", true);
    std::vector<real_type> log_FOI_coeffs(dim.log_FOI_coeffs.size);
    dust2::r::read_real_array(parameters, dim.log_FOI_coeffs, log_FOI_coeffs.data(), "log_FOI_coeffs", true);
    std::vector<real_type> log_R0_coeffs(dim.log_R0_coeffs.size);
    dust2::r::read_real_array(parameters, dim.log_R0_coeffs, log_R0_coeffs.data(), "log_R0_coeffs", true);
    std::vector<real_type> vacc_rate_daily(dim.vacc_rate_daily.size);
    dust2::r::read_real_array(parameters, dim.vacc_rate_daily, vacc_rate_daily.data(), "vacc_rate_daily", true);
    std::vector<real_type> sero_vc_factor(dim.sero_vc_factor.size);
    dust2::r::read_real_array(parameters, dim.sero_vc_factor, sero_vc_factor.data(), "sero_vc_factor", true);
    std::vector<real_type> sia_min(dim.sia_min.size);
    dust2::r::read_real_array(parameters, dim.sia_min, sia_min.data(), "sia_min", true);
    std::vector<real_type> sia_max(dim.sia_max.size);
    dust2::r::read_real_array(parameters, dim.sia_max, sia_max.data(), "sia_max", true);
    std::vector<real_type> S_0(dim.S_0.size);
    dust2::r::read_real_array(parameters, dim.S_0, S_0.data(), "S_0", true);
    std::vector<real_type> E_0(dim.E_0.size);
    dust2::r::read_real_array(parameters, dim.E_0, E_0.data(), "E_0", true);
    std::vector<real_type> I_0(dim.I_0.size);
    dust2::r::read_real_array(parameters, dim.I_0, I_0.data(), "I_0", true);
    std::vector<real_type> R_0(dim.R_0.size);
    dust2::r::read_real_array(parameters, dim.R_0, R_0.data(), "R_0", true);
    std::vector<real_type> V_0(dim.V_0.size);
    dust2::r::read_real_array(parameters, dim.V_0, V_0.data(), "V_0", true);
    std::vector<real_type> dP1_all(dim.dP1_all.size);
    dust2::r::read_real_array(parameters, dim.dP1_all, dP1_all.data(), "dP1_all", true);
    std::vector<real_type> dP2_all(dim.dP2_all.size);
    dust2::r::read_real_array(parameters, dim.dP2_all, dP2_all.data(), "dP2_all", true);
    shared_state::odin_internals_type odin;
    odin.packing.state = dust2::packing{
      {"day", {}},
      {"year", {}},
      {"S", std::vector<size_t>(dim.S.dim.begin(), dim.S.dim.end())},
      {"E", std::vector<size_t>(dim.E.dim.begin(), dim.E.dim.end())},
      {"I", std::vector<size_t>(dim.I.dim.begin(), dim.I.dim.end())},
      {"R", std::vector<size_t>(dim.R.dim.begin(), dim.R.dim.end())},
      {"V", std::vector<size_t>(dim.V.dim.begin(), dim.V.dim.end())},
      {"R_cu", std::vector<size_t>(dim.R_cu.dim.begin(), dim.R_cu.dim.end())},
      {"SEIR_cu", std::vector<size_t>(dim.SEIR_cu.dim.begin(), dim.SEIR_cu.dim.end())},
      {"V_cu", std::vector<size_t>(dim.V_cu.dim.begin(), dim.V_cu.dim.end())},
      {"infs_cu", std::vector<size_t>(dim.infs_cu.dim.begin(), dim.infs_cu.dim.end())},
      {"R_an", std::vector<size_t>(dim.R_an.dim.begin(), dim.R_an.dim.end())},
      {"SEIR_an", std::vector<size_t>(dim.SEIR_an.dim.begin(), dim.SEIR_an.dim.end())},
      {"V_an", std::vector<size_t>(dim.V_an.dim.begin(), dim.V_an.dim.end())},
      {"infs_an", std::vector<size_t>(dim.infs_an.dim.begin(), dim.infs_an.dim.end())},
      {"output_sero", std::vector<size_t>(dim.output_sero.dim.begin(), dim.output_sero.dim.end())},
      {"output_case", std::vector<size_t>(dim.output_case.dim.begin(), dim.output_case.dim.end())}
    };
    odin.packing.state.copy_offset(odin.offset.state.begin());
    return shared_state{odin, dim, time_inc, n_r, n_env_vars, n_sero_pts, n_case_pts, t_incubation, t_latent, t_infectious, N_age, vaccine_efficacy, p_severe_inf, p_death_severe_inf, p_rep_severe, p_rep_death, year0, n_years, n_t_pts, Pmin, FOI_max, rate1, rate2, p_rep, region_index_sero, region_index_case, sero_regions, case_regions, env_covar_values, log_FOI_coeffs, log_R0_coeffs, vacc_rate_daily, sero_vc_factor, sia_min, sia_max, S_0, E_0, I_0, R_0, V_0, dP1_all, dP2_all};
  }
  static internal_state build_internal(const shared_state& shared) {
    std::vector<real_type> I_new(shared.dim.I_new.size);
    std::vector<real_type> R_new(shared.dim.R_new.size);
    std::vector<real_type> P_nV(shared.dim.P_nV.size);
    std::vector<real_type> FOI_components(shared.dim.FOI_components.size);
    std::vector<real_type> R0_components(shared.dim.R0_components.size);
    std::vector<real_type> dP1(shared.dim.dP1.size);
    std::vector<real_type> dP2(shared.dim.dP2.size);
    std::vector<real_type> inv_P_nV(shared.dim.inv_P_nV.size);
    std::vector<real_type> P(shared.dim.P.size);
    std::vector<real_type> FOI_spillover(shared.dim.FOI_spillover.size);
    std::vector<real_type> R0(shared.dim.R0.size);
    std::vector<real_type> P_tot(shared.dim.P_tot.size);
    std::vector<real_type> inv_P(shared.dim.inv_P.size);
    std::vector<real_type> vacc_rate(shared.dim.vacc_rate.size);
    std::vector<real_type> beta(shared.dim.beta.size);
    std::vector<real_type> FOI_sum(shared.dim.FOI_sum.size);
    std::vector<real_type> E_new(shared.dim.E_new.size);
    return internal_state{I_new, R_new, P_nV, FOI_components, R0_components, dP1, dP2, inv_P_nV, P, FOI_spillover, R0, P_tot, inv_P, vacc_rate, beta, FOI_sum, E_new};
  }
  static data_type build_data(cpp11::list data, const shared_state& shared) {
    auto obs_sero_positives = std::vector<real_type>(shared.dim.obs_sero_positives.size);
    dust2::r::read_real_array(data, shared.dim.obs_sero_positives, obs_sero_positives.data(), "obs_sero_positives", true);
    auto obs_sero_samples = std::vector<real_type>(shared.dim.obs_sero_samples.size);
    dust2::r::read_real_array(data, shared.dim.obs_sero_samples, obs_sero_samples.data(), "obs_sero_samples", true);
    auto obs_case_values = std::vector<real_type>(shared.dim.obs_case_values.size);
    dust2::r::read_real_array(data, shared.dim.obs_case_values, obs_case_values.data(), "obs_case_values", true);
    auto case_population = std::vector<real_type>(shared.dim.case_population.size);
    dust2::r::read_real_array(data, shared.dim.case_population, case_population.data(), "case_population", true);
    return data_type{obs_sero_positives, obs_sero_samples, obs_case_values, case_population};
  }
  static void update_shared(cpp11::list parameters, shared_state& shared) {
    shared.time_inc = dust2::r::read_real(parameters, "time_inc", shared.time_inc);
    shared.t_incubation = dust2::r::read_real(parameters, "t_incubation", shared.t_incubation);
    shared.t_latent = dust2::r::read_real(parameters, "t_latent", shared.t_latent);
    shared.t_infectious = dust2::r::read_real(parameters, "t_infectious", shared.t_infectious);
    shared.vaccine_efficacy = dust2::r::read_real(parameters, "vaccine_efficacy", shared.vaccine_efficacy);
    shared.p_severe_inf = dust2::r::read_real(parameters, "p_severe_inf", shared.p_severe_inf);
    shared.p_death_severe_inf = dust2::r::read_real(parameters, "p_death_severe_inf", shared.p_death_severe_inf);
    shared.p_rep_severe = dust2::r::read_real(parameters, "p_rep_severe", shared.p_rep_severe);
    shared.p_rep_death = dust2::r::read_real(parameters, "p_rep_death", shared.p_rep_death);
    shared.year0 = dust2::r::read_real(parameters, "year0", shared.year0);
    shared.rate1 = shared.time_inc / (shared.t_incubation + shared.t_latent);
    shared.rate2 = shared.time_inc / shared.t_infectious;
    shared.p_rep = shared.p_severe_inf * ((shared.p_death_severe_inf * shared.p_rep_death) + ((1 - shared.p_death_severe_inf) * shared.p_rep_severe));
    dust2::r::read_real_array(parameters, shared.dim.region_index_sero, shared.region_index_sero.data(), "region_index_sero", false);
    dust2::r::read_real_array(parameters, shared.dim.region_index_case, shared.region_index_case.data(), "region_index_case", false);
    dust2::r::read_real_array(parameters, shared.dim.sero_regions, shared.sero_regions.data(), "sero_regions", false);
    dust2::r::read_real_array(parameters, shared.dim.case_regions, shared.case_regions.data(), "case_regions", false);
    dust2::r::read_real_array(parameters, shared.dim.env_covar_values, shared.env_covar_values.data(), "env_covar_values", false);
    dust2::r::read_real_array(parameters, shared.dim.log_FOI_coeffs, shared.log_FOI_coeffs.data(), "log_FOI_coeffs", false);
    dust2::r::read_real_array(parameters, shared.dim.log_R0_coeffs, shared.log_R0_coeffs.data(), "log_R0_coeffs", false);
    dust2::r::read_real_array(parameters, shared.dim.vacc_rate_daily, shared.vacc_rate_daily.data(), "vacc_rate_daily", false);
    dust2::r::read_real_array(parameters, shared.dim.sero_vc_factor, shared.sero_vc_factor.data(), "sero_vc_factor", false);
    dust2::r::read_real_array(parameters, shared.dim.sia_min, shared.sia_min.data(), "sia_min", false);
    dust2::r::read_real_array(parameters, shared.dim.sia_max, shared.sia_max.data(), "sia_max", false);
    dust2::r::read_real_array(parameters, shared.dim.S_0, shared.S_0.data(), "S_0", false);
    dust2::r::read_real_array(parameters, shared.dim.E_0, shared.E_0.data(), "E_0", false);
    dust2::r::read_real_array(parameters, shared.dim.I_0, shared.I_0.data(), "I_0", false);
    dust2::r::read_real_array(parameters, shared.dim.R_0, shared.R_0.data(), "R_0", false);
    dust2::r::read_real_array(parameters, shared.dim.V_0, shared.V_0.data(), "V_0", false);
    dust2::r::read_real_array(parameters, shared.dim.dP1_all, shared.dP1_all.data(), "dP1_all", false);
    dust2::r::read_real_array(parameters, shared.dim.dP2_all, shared.dP2_all.data(), "dP2_all", false);
  }
  static void update_internal(const shared_state& shared, internal_state& internal) {
  }
  static void initial(real_type time, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state) {
    state[0] = shared.time_inc;
    state[1] = shared.year0;
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.S.mult[1] + 2] = shared.S_0[i - 1 + (j - 1) * shared.dim.S_0.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.E.mult[1] + shared.odin.offset.state[3]] = shared.E_0[i - 1 + (j - 1) * shared.dim.E_0.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.I.mult[1] + shared.odin.offset.state[4]] = shared.I_0[i - 1 + (j - 1) * shared.dim.I_0.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.R.mult[1] + shared.odin.offset.state[5]] = shared.R_0[i - 1 + (j - 1) * shared.dim.R_0.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.V.mult[1] + shared.odin.offset.state[6]] = shared.V_0[i - 1 + (j - 1) * shared.dim.V_0.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.R_cu.mult[1] + shared.odin.offset.state[7]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.SEIR_cu.mult[1] + shared.odin.offset.state[8]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.V_cu.mult[1] + shared.odin.offset.state[9]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.infs_cu.mult[1] + shared.odin.offset.state[10]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_sero_pts); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.n_r); ++j) {
        state[i - 1 + (j - 1) * shared.dim.R_an.mult[1] + shared.odin.offset.state[11]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_sero_pts); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.n_r); ++j) {
        state[i - 1 + (j - 1) * shared.dim.SEIR_an.mult[1] + shared.odin.offset.state[12]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_sero_pts); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.n_r); ++j) {
        state[i - 1 + (j - 1) * shared.dim.V_an.mult[1] + shared.odin.offset.state[13]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_case_pts); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.n_r); ++j) {
        state[i - 1 + (j - 1) * shared.dim.infs_an.mult[1] + shared.odin.offset.state[14]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_sero_pts); ++i) {
      state[i - 1 + shared.odin.offset.state[15]] = 0;
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_case_pts); ++i) {
      state[i - 1 + shared.odin.offset.state[16]] = 0;
    }
  }
  static void update(real_type time, real_type dt, const real_type* state, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state_next) {
    const auto day = state[0];
    const auto * S = state + 2;
    const auto * E = state + shared.odin.offset.state[3];
    const auto * I = state + shared.odin.offset.state[4];
    const auto * R = state + shared.odin.offset.state[5];
    const auto * V = state + shared.odin.offset.state[6];
    const auto * R_cu = state + shared.odin.offset.state[7];
    const auto * SEIR_cu = state + shared.odin.offset.state[8];
    const auto * V_cu = state + shared.odin.offset.state[9];
    const auto * infs_cu = state + shared.odin.offset.state[10];
    const auto * R_an = state + shared.odin.offset.state[11];
    const auto * SEIR_an = state + shared.odin.offset.state[12];
    const auto * V_an = state + shared.odin.offset.state[13];
    const auto * infs_an = state + shared.odin.offset.state[14];
    const real_type year_i = monty::math::floor(day / 365) + 1;
    const real_type t_pt = day / shared.time_inc;
    const real_type flag_year = (std::fmod(static_cast<int>(day + shared.time_inc), 365) == 0 ? 1 : 0);
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.I_new[i - 1 + (j - 1) * shared.dim.I_new.mult[1]] = E[i - 1 + (j - 1) * shared.dim.E.mult[1]] * shared.rate1;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.R_new[i - 1 + (j - 1) * shared.dim.R_new.mult[1]] = I[i - 1 + (j - 1) * shared.dim.I.mult[1]] * shared.rate2;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.P_nV[i - 1 + (j - 1) * shared.dim.P_nV.mult[1]] = S[i - 1 + (j - 1) * shared.dim.S.mult[1]] + R[i - 1 + (j - 1) * shared.dim.R.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_env_vars); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.n_r); ++j) {
        internal.FOI_components[i - 1 + (j - 1) * shared.dim.FOI_components.mult[1]] = monty::math::exp(shared.log_FOI_coeffs[i - 1]) * shared.env_covar_values[i - 1 + (j - 1) * shared.dim.env_covar_values.mult[1] + (t_pt - 1) * shared.dim.env_covar_values.mult[2]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_env_vars); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.n_r); ++j) {
        internal.R0_components[i - 1 + (j - 1) * shared.dim.R0_components.mult[1]] = monty::math::exp(shared.log_R0_coeffs[i - 1]) * shared.env_covar_values[i - 1 + (j - 1) * shared.dim.env_covar_values.mult[1] + (t_pt - 1) * shared.dim.env_covar_values.mult[2]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.dP1[i - 1 + (j - 1) * shared.dim.dP1.mult[1]] = shared.dP1_all[i - 1 + (j - 1) * shared.dim.dP1_all.mult[1] + (year_i - 1) * shared.dim.dP1_all.mult[2]] * shared.time_inc;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.dP2[i - 1 + (j - 1) * shared.dim.dP2.mult[1]] = shared.dP2_all[i - 1 + (j - 1) * shared.dim.dP2_all.mult[1] + (year_i - 1) * shared.dim.dP2_all.mult[2]] * shared.time_inc;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.inv_P_nV[i - 1 + (j - 1) * shared.dim.inv_P_nV.mult[1]] = 1 / internal.P_nV[i - 1 + (j - 1) * shared.dim.P_nV.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.P[i - 1 + (j - 1) * shared.dim.P.mult[1]] = internal.P_nV[i - 1 + (j - 1) * shared.dim.P_nV.mult[1]] + V[i - 1 + (j - 1) * shared.dim.V.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      internal.FOI_spillover[i - 1] = dust2::array::sum<real_type>(internal.FOI_components.data(), shared.dim.FOI_components, {0, shared.dim.FOI_components.dim[0] - 1}, {i - 1, i - 1});
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      internal.R0[i - 1] = dust2::array::sum<real_type>(internal.R0_components.data(), shared.dim.R0_components, {0, shared.dim.R0_components.dim[0] - 1}, {i - 1, i - 1});
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      internal.P_tot[i - 1] = dust2::array::sum<real_type>(internal.P.data(), shared.dim.P, {i - 1, i - 1}, {0, shared.dim.P.dim[1] - 1});
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.inv_P[i - 1 + (j - 1) * shared.dim.inv_P.mult[1]] = 1 / internal.P[i - 1 + (j - 1) * shared.dim.P.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.vacc_rate[i - 1 + (j - 1) * shared.dim.vacc_rate.mult[1]] = shared.vacc_rate_daily[i - 1 + (j - 1) * shared.dim.vacc_rate_daily.mult[1] + (year_i - 1) * shared.dim.vacc_rate_daily.mult[2]] * shared.vaccine_efficacy * shared.time_inc * internal.P[i - 1 + (j - 1) * shared.dim.P.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      internal.beta[i - 1] = (internal.R0[i - 1] * shared.time_inc) / shared.t_infectious;
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      internal.FOI_sum[i - 1] = monty::math::min<real_type>(shared.FOI_max, internal.beta[i - 1] * (dust2::array::sum<real_type>(I, shared.dim.I, {i - 1, i - 1}, {0, shared.dim.I.dim[1] - 1}) / internal.P_tot[i - 1]) + (internal.FOI_spillover[i - 1] * shared.time_inc));
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.E_new[i - 1 + (j - 1) * shared.dim.E_new.mult[1]] = monty::random::binomial<real_type>(rng_state, static_cast<int>(S[i - 1 + (j - 1) * shared.dim.S.mult[1]]), internal.FOI_sum[i - 1]);
      }
    }
    state_next[0] = day + shared.time_inc;
    state_next[1] = year_i + shared.year0 - 1;
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      state_next[i - 1 + 2] = monty::math::max<real_type>(shared.Pmin, S[i - 1] - internal.E_new[i - 1] - internal.vacc_rate[i - 1] * S[i - 1] * internal.inv_P_nV[i - 1] + internal.dP1[i - 1] - (internal.dP2[i - 1] * S[i - 1] * internal.inv_P[i - 1]));
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 2; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.S.mult[1] + 2] = monty::math::max<real_type>(shared.Pmin, S[i - 1 + (j - 1) * shared.dim.S.mult[1]] - internal.E_new[i - 1 + (j - 1) * shared.dim.E_new.mult[1]] - internal.vacc_rate[i - 1 + (j - 1) * shared.dim.vacc_rate.mult[1]] * S[i - 1 + (j - 1) * shared.dim.S.mult[1]] * internal.inv_P_nV[i - 1 + (j - 1) * shared.dim.inv_P_nV.mult[1]] + (internal.dP1[i - 1 + (j - 1) * shared.dim.dP1.mult[1]] * S[i - 1 + (j - 1 - 1) * shared.dim.S.mult[1]] * internal.inv_P[i - 1 + (j - 1 - 1) * shared.dim.inv_P.mult[1]]) - (internal.dP2[i - 1 + (j - 1) * shared.dim.dP2.mult[1]] * S[i - 1 + (j - 1) * shared.dim.S.mult[1]] * internal.inv_P[i - 1 + (j - 1) * shared.dim.inv_P.mult[1]]));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.E.mult[1] + shared.odin.offset.state[3]] = monty::math::max<real_type>(shared.Pmin, E[i - 1 + (j - 1) * shared.dim.E.mult[1]] + internal.E_new[i - 1 + (j - 1) * shared.dim.E_new.mult[1]] - internal.I_new[i - 1 + (j - 1) * shared.dim.I_new.mult[1]]);
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.I.mult[1] + shared.odin.offset.state[4]] = monty::math::max<real_type>(shared.Pmin, I[i - 1 + (j - 1) * shared.dim.I.mult[1]] + internal.I_new[i - 1 + (j - 1) * shared.dim.I_new.mult[1]] - internal.R_new[i - 1 + (j - 1) * shared.dim.R_new.mult[1]]);
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      state_next[i - 1 + shared.odin.offset.state[5]] = monty::math::max<real_type>(shared.Pmin, R[i - 1] + internal.R_new[i - 1] - internal.vacc_rate[i - 1] * R[i - 1] * internal.inv_P_nV[i - 1] - (internal.dP2[i - 1] * R[i - 1] * internal.inv_P[i - 1]));
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 2; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.R.mult[1] + shared.odin.offset.state[5]] = monty::math::max<real_type>(shared.Pmin, R[i - 1 + (j - 1) * shared.dim.R.mult[1]] + internal.R_new[i - 1 + (j - 1) * shared.dim.R_new.mult[1]] - internal.vacc_rate[i - 1 + (j - 1) * shared.dim.vacc_rate.mult[1]] * R[i - 1 + (j - 1) * shared.dim.R.mult[1]] * internal.inv_P_nV[i - 1 + (j - 1) * shared.dim.inv_P_nV.mult[1]] + (internal.dP1[i - 1 + (j - 1) * shared.dim.dP1.mult[1]] * R[i - 1 + (j - 1 - 1) * shared.dim.R.mult[1]] * internal.inv_P[i - 1 + (j - 1 - 1) * shared.dim.inv_P.mult[1]]) - (internal.dP2[i - 1 + (j - 1) * shared.dim.dP2.mult[1]] * R[i - 1 + (j - 1) * shared.dim.R.mult[1]] * internal.inv_P[i - 1 + (j - 1) * shared.dim.inv_P.mult[1]]));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      state_next[i - 1 + shared.odin.offset.state[6]] = monty::math::max<real_type>(shared.Pmin, V[i - 1] + internal.vacc_rate[i - 1] - (internal.dP2[i - 1] * V[i - 1] * internal.inv_P[i - 1]));
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 2; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.V.mult[1] + shared.odin.offset.state[6]] = monty::math::max<real_type>(shared.Pmin, V[i - 1 + (j - 1) * shared.dim.V.mult[1]] + internal.vacc_rate[i - 1 + (j - 1) * shared.dim.vacc_rate.mult[1]] + (internal.dP1[i - 1 + (j - 1) * shared.dim.dP1.mult[1]] * V[i - 1 + (j - 1 - 1) * shared.dim.V.mult[1]] * internal.inv_P[i - 1 + (j - 1 - 1) * shared.dim.inv_P.mult[1]]) - (internal.dP2[i - 1 + (j - 1) * shared.dim.dP2.mult[1]] * V[i - 1 + (j - 1) * shared.dim.V.mult[1]] * internal.inv_P[i - 1 + (j - 1) * shared.dim.inv_P.mult[1]]));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.R_cu.mult[1] + shared.odin.offset.state[7]] = (shared.sero_regions[i - 1] == 0 ? 0 : (flag_year == 1 ? 0 : R_cu[i - 1 + (j - 1) * shared.dim.R_cu.mult[1]] + R[i - 1 + (j - 1) * shared.dim.R.mult[1]]));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.SEIR_cu.mult[1] + shared.odin.offset.state[8]] = (shared.sero_regions[i - 1] == 0 ? 0 : (flag_year == 1 ? 0 : SEIR_cu[i - 1 + (j - 1) * shared.dim.SEIR_cu.mult[1]] + S[i - 1 + (j - 1) * shared.dim.S.mult[1]] + E[i - 1 + (j - 1) * shared.dim.E.mult[1]] + I[i - 1 + (j - 1) * shared.dim.I.mult[1]] + R[i - 1 + (j - 1) * shared.dim.R.mult[1]]));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.V_cu.mult[1] + shared.odin.offset.state[9]] = (shared.sero_regions[i - 1] == 0 ? 0 : (flag_year == 1 ? 0 : V_cu[i - 1 + (j - 1) * shared.dim.V_cu.mult[1]] + V[i - 1 + (j - 1) * shared.dim.V.mult[1]]));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_r); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.infs_cu.mult[1] + shared.odin.offset.state[10]] = (shared.case_regions[i - 1] == 0 ? 0 : (flag_year == 1 ? 0 : infs_cu[i - 1 + (j - 1) * shared.dim.infs_cu.mult[1]] + internal.I_new[i - 1 + (j - 1) * shared.dim.I_new.mult[1]]));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_sero_pts); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.n_r); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.R_an.mult[1] + shared.odin.offset.state[11]] = (flag_year == 0 ? 0 : (shared.region_index_sero[i - 1 + (j - 1) * shared.dim.region_index_sero.mult[1]] == 0 ? 0 : dust2::array::sum<real_type>(R_cu, shared.dim.R_cu, {j - 1, j - 1}, {shared.sia_min[i - 1] - 1, shared.sia_max[i - 1] - 1}) + dust2::array::sum<real_type>(R, shared.dim.R, {j - 1, j - 1}, {shared.sia_min[i - 1] - 1, shared.sia_max[i - 1] - 1})));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_sero_pts); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.n_r); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.SEIR_an.mult[1] + shared.odin.offset.state[12]] = (flag_year == 0 ? 0 : (shared.region_index_sero[i - 1 + (j - 1) * shared.dim.region_index_sero.mult[1]] == 0 ? 0 : dust2::array::sum<real_type>(SEIR_cu, shared.dim.SEIR_cu, {j - 1, j - 1}, {shared.sia_min[i - 1] - 1, shared.sia_max[i - 1] - 1}) + dust2::array::sum<real_type>(S, shared.dim.S, {j - 1, j - 1}, {shared.sia_min[i - 1] - 1, shared.sia_max[i - 1] - 1}) + dust2::array::sum<real_type>(E, shared.dim.E, {j - 1, j - 1}, {shared.sia_min[i - 1] - 1, shared.sia_max[i - 1] - 1}) + dust2::array::sum<real_type>(I, shared.dim.I, {j - 1, j - 1}, {shared.sia_min[i - 1] - 1, shared.sia_max[i - 1] - 1}) + dust2::array::sum<real_type>(R, shared.dim.R, {j - 1, j - 1}, {shared.sia_min[i - 1] - 1, shared.sia_max[i - 1] - 1})));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_sero_pts); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.n_r); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.V_an.mult[1] + shared.odin.offset.state[13]] = (flag_year == 0 ? 0 : (shared.region_index_sero[i - 1 + (j - 1) * shared.dim.region_index_sero.mult[1]] == 0 ? 0 : dust2::array::sum<real_type>(V_cu, shared.dim.V_cu, {j - 1, j - 1}, {shared.sia_min[i - 1] - 1, shared.sia_max[i - 1] - 1}) + dust2::array::sum<real_type>(V, shared.dim.V, {j - 1, j - 1}, {shared.sia_min[i - 1] - 1, shared.sia_max[i - 1] - 1})));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_case_pts); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.n_r); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.infs_an.mult[1] + shared.odin.offset.state[14]] = (flag_year == 0 ? 0 : (shared.region_index_case[i - 1 + (j - 1) * shared.dim.region_index_case.mult[1]] == 0 ? 0 : dust2::array::sum<real_type>(infs_cu, shared.dim.infs_cu, {j - 1, j - 1}, {0, shared.N_age - 1}) + dust2::array::sum<real_type>(internal.I_new.data(), shared.dim.I_new, {j - 1, j - 1}, {0, shared.N_age - 1})));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_sero_pts); ++i) {
      state_next[i - 1 + shared.odin.offset.state[15]] = (shared.sero_vc_factor[i - 1] == 0 ? dust2::array::sum<real_type>(R_an, shared.dim.R_an, {i - 1, i - 1}, {0, shared.dim.R_an.dim[1] - 1}) / dust2::array::sum<real_type>(SEIR_an, shared.dim.SEIR_an, {i - 1, i - 1}, {0, shared.dim.SEIR_an.dim[1] - 1}) : ((1 - shared.sero_vc_factor[i - 1]) * (dust2::array::sum<real_type>(R_an, shared.dim.R_an, {i - 1, i - 1}, {0, shared.dim.R_an.dim[1] - 1}) / dust2::array::sum<real_type>(SEIR_an, shared.dim.SEIR_an, {i - 1, i - 1}, {0, shared.dim.SEIR_an.dim[1] - 1}))) + (shared.sero_vc_factor[i - 1] * ((dust2::array::sum<real_type>(R_an, shared.dim.R_an, {i - 1, i - 1}, {0, shared.dim.R_an.dim[1] - 1}) + dust2::array::sum<real_type>(V_an, shared.dim.V_an, {i - 1, i - 1}, {0, shared.dim.V_an.dim[1] - 1})) / (dust2::array::sum<real_type>(SEIR_an, shared.dim.SEIR_an, {i - 1, i - 1}, {0, shared.dim.SEIR_an.dim[1] - 1}) + dust2::array::sum<real_type>(V_an, shared.dim.V_an, {i - 1, i - 1}, {0, shared.dim.V_an.dim[1] - 1})))));
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_case_pts); ++i) {
      state_next[i - 1 + shared.odin.offset.state[16]] = monty::random::binomial<real_type>(rng_state, static_cast<int>(dust2::array::sum<real_type>(infs_an, shared.dim.infs_an, {i - 1, i - 1}, {0, shared.dim.infs_an.dim[1] - 1})), shared.p_rep);
    }
  }
  static real_type compare_data(real_type time, const real_type* state, const data_type& data, const shared_state& shared, internal_state& internal, rng_state_type& rng_state) {
    auto unless_nan = [](real_type x) { return std::isnan(x) ? 0 : x; };
    const auto * output_sero = state + shared.odin.offset.state[15];
    const auto * output_case = state + shared.odin.offset.state[16];
    real_type odin_ll = 0;
    for (size_t i = 1; i <= shared.dim.obs_sero_positives.size; ++i) {
      odin_ll += unless_nan(monty::density::binomial(data.obs_sero_positives[i - 1], data.obs_sero_samples[i - 1], output_sero[i - 1], true));
    }
    for (size_t i = 1; i <= shared.dim.obs_case_values.size; ++i) {
      odin_ll += unless_nan(monty::density::negative_binomial_mu(data.obs_case_values[i - 1], data.case_population[i - 1], output_case[i - 1], true));
    }
    return odin_ll;
  }
};

#include <cpp11.hpp>
#include <dust2/r/discrete/system.hpp>
#include <dust2/r/discrete/filter.hpp>
#include <dust2/r/discrete/unfilter.hpp>

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_alloc(cpp11::list r_pars, cpp11::sexp r_time, cpp11::list r_time_control, cpp11::sexp r_n_particles, cpp11::sexp r_n_groups, cpp11::sexp r_seed, cpp11::sexp r_deterministic, cpp11::sexp r_n_threads) {
  return dust2::r::dust2_discrete_alloc<SEIRV_Model_mr04_fit>(r_pars, r_time, r_time_control, r_n_particles, r_n_groups, r_seed, r_deterministic, r_n_threads);
}
[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_run_to_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_run_to_time<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_state(cpp11::sexp ptr, cpp11::sexp r_index_state, cpp11::sexp r_index_particle, cpp11::sexp r_index_group, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_state<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_index_state, r_index_particle, r_index_group, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_time(cpp11::sexp ptr) {
  return dust2::r::dust2_system_time<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_set_state_initial(cpp11::sexp ptr) {
  return dust2::r::dust2_system_set_state_initial<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_set_state(cpp11::sexp ptr, cpp11::list r_state) {
  return dust2::r::dust2_system_set_state<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_state);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_reorder(cpp11::sexp ptr, cpp11::integers r_index) {
  return dust2::r::dust2_system_reorder<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_index);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_rng_state(cpp11::sexp ptr) {
  return dust2::r::dust2_system_rng_state<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_set_rng_state(cpp11::sexp ptr, cpp11::sexp r_rng_state) {
  return dust2::r::dust2_system_set_rng_state<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_rng_state);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_set_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_set_time<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_update_pars(cpp11::sexp ptr, cpp11::list pars) {
  return dust2::r::dust2_system_update_pars<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, pars);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_simulate(cpp11::sexp ptr, cpp11::sexp r_times, cpp11::sexp r_index_state, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_simulate<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_times, r_index_state, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_unfilter_SEIRV_Model_mr04_fit_alloc(cpp11::list r_pars, cpp11::sexp r_time_start, cpp11::sexp r_time, cpp11::list r_time_control, cpp11::list r_data, cpp11::sexp r_n_particles, cpp11::sexp r_n_groups, cpp11::sexp r_n_threads) {
  return dust2::r::dust2_discrete_unfilter_alloc<SEIRV_Model_mr04_fit>(r_pars, r_time_start, r_time, r_time_control, r_data, r_n_particles, r_n_groups, r_n_threads);
}

[[cpp11::register]]
SEXP dust2_filter_SEIRV_Model_mr04_fit_alloc(cpp11::list r_pars, cpp11::sexp r_time_start, cpp11::sexp r_time, cpp11::list r_time_control, cpp11::list r_data, cpp11::sexp r_n_particles, cpp11::sexp r_n_groups, cpp11::sexp r_n_threads, cpp11::sexp r_seed) {
  return dust2::r::dust2_discrete_filter_alloc<SEIRV_Model_mr04_fit>(r_pars, r_time_start, r_time, r_time_control, r_data, r_n_particles, r_n_groups, r_n_threads, r_seed);
}
[[cpp11::register]]
SEXP dust2_system_SEIRV_Model_mr04_fit_compare_data(cpp11::sexp ptr, cpp11::list r_data, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_compare_data<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_data, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_unfilter_SEIRV_Model_mr04_fit_update_pars(cpp11::sexp ptr, cpp11::list r_pars, cpp11::sexp r_index_group) {
  return dust2::r::dust2_unfilter_update_pars<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_pars, r_index_group);
}

[[cpp11::register]]
SEXP dust2_unfilter_SEIRV_Model_mr04_fit_run(cpp11::sexp ptr, cpp11::sexp r_initial, bool save_trajectories, cpp11::sexp save_snapshots, bool adjoint, cpp11::sexp r_index_state, cpp11::sexp r_index_group, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_unfilter_run<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_initial, save_trajectories, save_snapshots, adjoint, r_index_state, r_index_group, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_unfilter_SEIRV_Model_mr04_fit_last_trajectories(cpp11::sexp ptr, bool select_random_particle, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_unfilter_last_trajectories<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, select_random_particle, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_unfilter_SEIRV_Model_mr04_fit_last_snapshots(cpp11::sexp ptr, bool select_random_particle, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_unfilter_last_snapshots<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, select_random_particle, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_unfilter_SEIRV_Model_mr04_fit_last_state(cpp11::sexp ptr, bool select_random_particle, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_unfilter_last_state<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, select_random_particle, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_filter_SEIRV_Model_mr04_fit_update_pars(cpp11::sexp ptr, cpp11::list r_pars, cpp11::sexp r_index_group) {
  return dust2::r::dust2_filter_update_pars<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_pars, r_index_group);
}

[[cpp11::register]]
SEXP dust2_filter_SEIRV_Model_mr04_fit_run(cpp11::sexp ptr, cpp11::sexp r_initial, bool save_trajectories, cpp11::sexp save_snapshots, bool adjoint, cpp11::sexp index_state, cpp11::sexp index_group, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_filter_run<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_initial, save_trajectories, save_snapshots, adjoint, index_state, index_group, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_filter_SEIRV_Model_mr04_fit_last_trajectories(cpp11::sexp ptr, bool select_random_particle, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_filter_last_trajectories<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, select_random_particle, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_filter_SEIRV_Model_mr04_fit_last_snapshots(cpp11::sexp ptr, bool select_random_particle, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_filter_last_snapshots<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, select_random_particle, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_filter_SEIRV_Model_mr04_fit_last_state(cpp11::sexp ptr, bool select_random_particle, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_filter_last_state<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, select_random_particle, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_filter_SEIRV_Model_mr04_fit_rng_state(cpp11::sexp ptr) {
  return dust2::r::dust2_filter_rng_state<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr);
}

[[cpp11::register]]
SEXP dust2_filter_SEIRV_Model_mr04_fit_set_rng_state(cpp11::sexp ptr, cpp11::sexp r_rng_state) {
  return dust2::r::dust2_filter_set_rng_state<dust2::dust_discrete<SEIRV_Model_mr04_fit>>(ptr, r_rng_state);
}
