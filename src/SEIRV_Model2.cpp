// Generated by dust2 (version 0.3.22) - do not edit

// Generated by odin2 (version 0.3.29) - do not edit
#include <dust2/common.hpp>
// [[dust2::class(SEIRV_Model2)]]
// [[dust2::time_type(discrete)]]
// [[dust2::parameter(time_inc, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(n_regions, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(t_incubation, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(t_latent, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(t_infectious, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(FOI_spillover, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(R0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(N_age, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(vacc_rate_daily, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(vaccine_efficacy, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(year0, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(S_0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(E_0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(I_0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(R_0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(V_0, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(dP1_all, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(dP2_all, type = "real_type", rank = 3, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(n_years, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(n_t_pts, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
class SEIRV_Model2 {
public:
  SEIRV_Model2() = delete;
  using real_type = double;
  using rng_state_type = monty::random::generator<real_type>;
  struct shared_state {
    struct odin_internals_type {
      struct {
        dust2::packing state;
      } packing;
      struct {
        std::array<size_t, 15> state;
      } offset;
    } odin;
    struct dim_type {
      dust2::array::dimensions<1> FOI_total;
      dust2::array::dimensions<2> S;
      dust2::array::dimensions<2> E;
      dust2::array::dimensions<2> I;
      dust2::array::dimensions<2> R;
      dust2::array::dimensions<2> V;
      dust2::array::dimensions<2> C;
      dust2::array::dimensions<2> C_cu;
      dust2::array::dimensions<2> C_annual;
      dust2::array::dimensions<2> R_cu;
      dust2::array::dimensions<2> R_annual;
      dust2::array::dimensions<2> SEIR_cu;
      dust2::array::dimensions<2> SEIR_annual;
      dust2::array::dimensions<1> beta;
      dust2::array::dimensions<1> FOI_sum;
      dust2::array::dimensions<2> dP1;
      dust2::array::dimensions<2> dP2;
      dust2::array::dimensions<2> E_new;
      dust2::array::dimensions<2> I_new;
      dust2::array::dimensions<2> R_new;
      dust2::array::dimensions<2> P_nV;
      dust2::array::dimensions<2> inv_P_nV;
      dust2::array::dimensions<2> P;
      dust2::array::dimensions<1> P_tot;
      dust2::array::dimensions<2> inv_P;
      dust2::array::dimensions<2> vacc_rate;
      dust2::array::dimensions<2> S_0;
      dust2::array::dimensions<2> E_0;
      dust2::array::dimensions<2> I_0;
      dust2::array::dimensions<2> R_0;
      dust2::array::dimensions<2> V_0;
      dust2::array::dimensions<3> dP1_all;
      dust2::array::dimensions<3> dP2_all;
      dust2::array::dimensions<3> vacc_rate_daily;
      dust2::array::dimensions<2> FOI_spillover;
      dust2::array::dimensions<2> R0;
    } dim;
    real_type time_inc;
    int n_regions;
    real_type t_incubation;
    real_type t_latent;
    real_type t_infectious;
    int N_age;
    real_type vaccine_efficacy;
    real_type year0;
    int n_years;
    int n_t_pts;
    real_type Pmin;
    real_type FOI_max;
    real_type rate1;
    real_type rate2;
    std::vector<real_type> FOI_spillover;
    std::vector<real_type> R0;
    std::vector<real_type> vacc_rate_daily;
    std::vector<real_type> S_0;
    std::vector<real_type> E_0;
    std::vector<real_type> I_0;
    std::vector<real_type> R_0;
    std::vector<real_type> V_0;
    std::vector<real_type> dP1_all;
    std::vector<real_type> dP2_all;
  };
  struct internal_state {
    std::vector<real_type> I_new;
    std::vector<real_type> R_new;
    std::vector<real_type> P_nV;
    std::vector<real_type> beta;
    std::vector<real_type> dP1;
    std::vector<real_type> dP2;
    std::vector<real_type> inv_P_nV;
    std::vector<real_type> P;
    std::vector<real_type> P_tot;
    std::vector<real_type> inv_P;
    std::vector<real_type> vacc_rate;
    std::vector<real_type> FOI_sum;
    std::vector<real_type> E_new;
  };
  using data_type = dust2::no_data;
  static dust2::packing packing_state(const shared_state& shared) {
    return shared.odin.packing.state;
  }
  static shared_state build_shared(cpp11::list parameters) {
    shared_state::dim_type dim;
    const real_type time_inc = dust2::r::read_real(parameters, "time_inc");
    const int n_regions = dust2::r::read_int(parameters, "n_regions");
    const real_type t_incubation = dust2::r::read_real(parameters, "t_incubation");
    const real_type t_latent = dust2::r::read_real(parameters, "t_latent");
    const real_type t_infectious = dust2::r::read_real(parameters, "t_infectious");
    const int N_age = dust2::r::read_int(parameters, "N_age");
    const real_type vaccine_efficacy = dust2::r::read_real(parameters, "vaccine_efficacy");
    const real_type year0 = dust2::r::read_real(parameters, "year0");
    const int n_years = dust2::r::read_int(parameters, "n_years");
    const int n_t_pts = dust2::r::read_int(parameters, "n_t_pts");
    const real_type Pmin = static_cast<real_type>(1e-99);
    const real_type FOI_max = 1;
    const real_type rate1 = time_inc / (t_incubation + t_latent);
    const real_type rate2 = time_inc / t_infectious;
    dim.FOI_total.set({static_cast<size_t>(n_regions)});
    dim.S.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.E.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.I.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.R.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.V.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.C.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.C_cu.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.C_annual.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.R_cu.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.R_annual.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.SEIR_cu.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.SEIR_annual.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.beta.set({static_cast<size_t>(n_regions)});
    dim.FOI_sum.set({static_cast<size_t>(n_regions)});
    dim.dP1.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.dP2.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.E_new.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.I_new.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.R_new.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.P_nV.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.inv_P_nV.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.P.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.P_tot.set({static_cast<size_t>(n_regions)});
    dim.inv_P.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.vacc_rate.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.S_0.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.E_0.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.I_0.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.R_0.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.V_0.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age)});
    dim.dP1_all.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age), static_cast<size_t>(n_years)});
    dim.dP2_all.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age), static_cast<size_t>(n_years)});
    dim.vacc_rate_daily.set({static_cast<size_t>(n_regions), static_cast<size_t>(N_age), static_cast<size_t>(n_years)});
    dim.FOI_spillover.set({static_cast<size_t>(n_regions), static_cast<size_t>(n_t_pts)});
    dim.R0.set({static_cast<size_t>(n_regions), static_cast<size_t>(n_t_pts)});
    std::vector<real_type> FOI_spillover(dim.FOI_spillover.size);
    dust2::r::read_real_array(parameters, dim.FOI_spillover, FOI_spillover.data(), "FOI_spillover", true);
    std::vector<real_type> R0(dim.R0.size);
    dust2::r::read_real_array(parameters, dim.R0, R0.data(), "R0", true);
    std::vector<real_type> vacc_rate_daily(dim.vacc_rate_daily.size);
    dust2::r::read_real_array(parameters, dim.vacc_rate_daily, vacc_rate_daily.data(), "vacc_rate_daily", true);
    std::vector<real_type> S_0(dim.S_0.size);
    dust2::r::read_real_array(parameters, dim.S_0, S_0.data(), "S_0", true);
    std::vector<real_type> E_0(dim.E_0.size);
    dust2::r::read_real_array(parameters, dim.E_0, E_0.data(), "E_0", true);
    std::vector<real_type> I_0(dim.I_0.size);
    dust2::r::read_real_array(parameters, dim.I_0, I_0.data(), "I_0", true);
    std::vector<real_type> R_0(dim.R_0.size);
    dust2::r::read_real_array(parameters, dim.R_0, R_0.data(), "R_0", true);
    std::vector<real_type> V_0(dim.V_0.size);
    dust2::r::read_real_array(parameters, dim.V_0, V_0.data(), "V_0", true);
    std::vector<real_type> dP1_all(dim.dP1_all.size);
    dust2::r::read_real_array(parameters, dim.dP1_all, dP1_all.data(), "dP1_all", true);
    std::vector<real_type> dP2_all(dim.dP2_all.size);
    dust2::r::read_real_array(parameters, dim.dP2_all, dP2_all.data(), "dP2_all", true);
    shared_state::odin_internals_type odin;
    odin.packing.state = dust2::packing{
      {"day", {}},
      {"year", {}},
      {"FOI_total", std::vector<size_t>(dim.FOI_total.dim.begin(), dim.FOI_total.dim.end())},
      {"S", std::vector<size_t>(dim.S.dim.begin(), dim.S.dim.end())},
      {"E", std::vector<size_t>(dim.E.dim.begin(), dim.E.dim.end())},
      {"I", std::vector<size_t>(dim.I.dim.begin(), dim.I.dim.end())},
      {"R", std::vector<size_t>(dim.R.dim.begin(), dim.R.dim.end())},
      {"V", std::vector<size_t>(dim.V.dim.begin(), dim.V.dim.end())},
      {"C", std::vector<size_t>(dim.C.dim.begin(), dim.C.dim.end())},
      {"C_cu", std::vector<size_t>(dim.C_cu.dim.begin(), dim.C_cu.dim.end())},
      {"C_annual", std::vector<size_t>(dim.C_annual.dim.begin(), dim.C_annual.dim.end())},
      {"R_cu", std::vector<size_t>(dim.R_cu.dim.begin(), dim.R_cu.dim.end())},
      {"R_annual", std::vector<size_t>(dim.R_annual.dim.begin(), dim.R_annual.dim.end())},
      {"SEIR_cu", std::vector<size_t>(dim.SEIR_cu.dim.begin(), dim.SEIR_cu.dim.end())},
      {"SEIR_annual", std::vector<size_t>(dim.SEIR_annual.dim.begin(), dim.SEIR_annual.dim.end())}
    };
    odin.packing.state.copy_offset(odin.offset.state.begin());
    return shared_state{odin, dim, time_inc, n_regions, t_incubation, t_latent, t_infectious, N_age, vaccine_efficacy, year0, n_years, n_t_pts, Pmin, FOI_max, rate1, rate2, FOI_spillover, R0, vacc_rate_daily, S_0, E_0, I_0, R_0, V_0, dP1_all, dP2_all};
  }
  static internal_state build_internal(const shared_state& shared) {
    std::vector<real_type> I_new(shared.dim.I_new.size);
    std::vector<real_type> R_new(shared.dim.R_new.size);
    std::vector<real_type> P_nV(shared.dim.P_nV.size);
    std::vector<real_type> beta(shared.dim.beta.size);
    std::vector<real_type> dP1(shared.dim.dP1.size);
    std::vector<real_type> dP2(shared.dim.dP2.size);
    std::vector<real_type> inv_P_nV(shared.dim.inv_P_nV.size);
    std::vector<real_type> P(shared.dim.P.size);
    std::vector<real_type> P_tot(shared.dim.P_tot.size);
    std::vector<real_type> inv_P(shared.dim.inv_P.size);
    std::vector<real_type> vacc_rate(shared.dim.vacc_rate.size);
    std::vector<real_type> FOI_sum(shared.dim.FOI_sum.size);
    std::vector<real_type> E_new(shared.dim.E_new.size);
    return internal_state{I_new, R_new, P_nV, beta, dP1, dP2, inv_P_nV, P, P_tot, inv_P, vacc_rate, FOI_sum, E_new};
  }
  static void update_shared(cpp11::list parameters, shared_state& shared) {
    shared.time_inc = dust2::r::read_real(parameters, "time_inc", shared.time_inc);
    shared.t_incubation = dust2::r::read_real(parameters, "t_incubation", shared.t_incubation);
    shared.t_latent = dust2::r::read_real(parameters, "t_latent", shared.t_latent);
    shared.t_infectious = dust2::r::read_real(parameters, "t_infectious", shared.t_infectious);
    shared.vaccine_efficacy = dust2::r::read_real(parameters, "vaccine_efficacy", shared.vaccine_efficacy);
    shared.year0 = dust2::r::read_real(parameters, "year0", shared.year0);
    shared.rate1 = shared.time_inc / (shared.t_incubation + shared.t_latent);
    shared.rate2 = shared.time_inc / shared.t_infectious;
    dust2::r::read_real_array(parameters, shared.dim.FOI_spillover, shared.FOI_spillover.data(), "FOI_spillover", false);
    dust2::r::read_real_array(parameters, shared.dim.R0, shared.R0.data(), "R0", false);
    dust2::r::read_real_array(parameters, shared.dim.vacc_rate_daily, shared.vacc_rate_daily.data(), "vacc_rate_daily", false);
    dust2::r::read_real_array(parameters, shared.dim.S_0, shared.S_0.data(), "S_0", false);
    dust2::r::read_real_array(parameters, shared.dim.E_0, shared.E_0.data(), "E_0", false);
    dust2::r::read_real_array(parameters, shared.dim.I_0, shared.I_0.data(), "I_0", false);
    dust2::r::read_real_array(parameters, shared.dim.R_0, shared.R_0.data(), "R_0", false);
    dust2::r::read_real_array(parameters, shared.dim.V_0, shared.V_0.data(), "V_0", false);
    dust2::r::read_real_array(parameters, shared.dim.dP1_all, shared.dP1_all.data(), "dP1_all", false);
    dust2::r::read_real_array(parameters, shared.dim.dP2_all, shared.dP2_all.data(), "dP2_all", false);
  }
  static void update_internal(const shared_state& shared, internal_state& internal) {
  }
  static void initial(real_type time, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state) {
    state[0] = shared.time_inc;
    state[1] = shared.year0;
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      state[i - 1 + 2] = shared.FOI_spillover[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.S.mult[1] + shared.odin.offset.state[3]] = shared.S_0[i - 1 + (j - 1) * shared.dim.S_0.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.E.mult[1] + shared.odin.offset.state[4]] = shared.E_0[i - 1 + (j - 1) * shared.dim.E_0.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.I.mult[1] + shared.odin.offset.state[5]] = shared.I_0[i - 1 + (j - 1) * shared.dim.I_0.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.R.mult[1] + shared.odin.offset.state[6]] = shared.R_0[i - 1 + (j - 1) * shared.dim.R_0.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.V.mult[1] + shared.odin.offset.state[7]] = shared.V_0[i - 1 + (j - 1) * shared.dim.V_0.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.C.mult[1] + shared.odin.offset.state[8]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.C_cu.mult[1] + shared.odin.offset.state[9]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.C_annual.mult[1] + shared.odin.offset.state[10]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.R_cu.mult[1] + shared.odin.offset.state[11]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.R_annual.mult[1] + shared.odin.offset.state[12]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.SEIR_cu.mult[1] + shared.odin.offset.state[13]] = 0;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state[i - 1 + (j - 1) * shared.dim.SEIR_annual.mult[1] + shared.odin.offset.state[14]] = 0;
      }
    }
  }
  static void update(real_type time, real_type dt, const real_type* state, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state_next) {
    const auto day = state[0];
    const auto * S = state + shared.odin.offset.state[3];
    const auto * E = state + shared.odin.offset.state[4];
    const auto * I = state + shared.odin.offset.state[5];
    const auto * R = state + shared.odin.offset.state[6];
    const auto * V = state + shared.odin.offset.state[7];
    const auto * C_cu = state + shared.odin.offset.state[9];
    const auto * R_cu = state + shared.odin.offset.state[11];
    const auto * SEIR_cu = state + shared.odin.offset.state[13];
    const real_type year_i = monty::math::floor(day / 365) + 1;
    const real_type t_pt = day / shared.time_inc;
    const real_type flag_year = (std::fmod(static_cast<int>(day + shared.time_inc), 365) == 0 ? 1 : 0);
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.I_new[i - 1 + (j - 1) * shared.dim.I_new.mult[1]] = E[i - 1 + (j - 1) * shared.dim.E.mult[1]] * shared.rate1;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.R_new[i - 1 + (j - 1) * shared.dim.R_new.mult[1]] = I[i - 1 + (j - 1) * shared.dim.I.mult[1]] * shared.rate2;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.P_nV[i - 1 + (j - 1) * shared.dim.P_nV.mult[1]] = S[i - 1 + (j - 1) * shared.dim.S.mult[1]] + R[i - 1 + (j - 1) * shared.dim.R.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      internal.beta[i - 1] = (shared.R0[i - 1 + (t_pt - 1) * shared.dim.R0.mult[1]] * shared.time_inc) / shared.t_infectious;
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.dP1[i - 1 + (j - 1) * shared.dim.dP1.mult[1]] = shared.dP1_all[i - 1 + (j - 1) * shared.dim.dP1_all.mult[1] + (year_i - 1) * shared.dim.dP1_all.mult[2]] * shared.time_inc;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.dP2[i - 1 + (j - 1) * shared.dim.dP2.mult[1]] = shared.dP2_all[i - 1 + (j - 1) * shared.dim.dP2_all.mult[1] + (year_i - 1) * shared.dim.dP2_all.mult[2]] * shared.time_inc;
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.inv_P_nV[i - 1 + (j - 1) * shared.dim.inv_P_nV.mult[1]] = 1 / internal.P_nV[i - 1 + (j - 1) * shared.dim.P_nV.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.P[i - 1 + (j - 1) * shared.dim.P.mult[1]] = internal.P_nV[i - 1 + (j - 1) * shared.dim.P_nV.mult[1]] + V[i - 1 + (j - 1) * shared.dim.V.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      internal.P_tot[i - 1] = dust2::array::sum<real_type>(internal.P.data(), shared.dim.P, {i - 1, i - 1}, {0, shared.dim.P.dim[1] - 1});
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.inv_P[i - 1 + (j - 1) * shared.dim.inv_P.mult[1]] = 1 / internal.P[i - 1 + (j - 1) * shared.dim.P.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.vacc_rate[i - 1 + (j - 1) * shared.dim.vacc_rate.mult[1]] = shared.vacc_rate_daily[i - 1 + (j - 1) * shared.dim.vacc_rate_daily.mult[1] + (year_i - 1) * shared.dim.vacc_rate_daily.mult[2]] * shared.vaccine_efficacy * shared.time_inc * internal.P[i - 1 + (j - 1) * shared.dim.P.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      internal.FOI_sum[i - 1] = monty::math::min<real_type>(shared.FOI_max, internal.beta[i - 1] * (dust2::array::sum<real_type>(I, shared.dim.I, {i - 1, i - 1}, {0, shared.dim.I.dim[1] - 1}) / internal.P_tot[i - 1]) + (shared.FOI_spillover[i - 1 + (t_pt - 1) * shared.dim.FOI_spillover.mult[1]] * shared.time_inc));
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        internal.E_new[i - 1 + (j - 1) * shared.dim.E_new.mult[1]] = monty::random::binomial<real_type>(rng_state, static_cast<int>(S[i - 1 + (j - 1) * shared.dim.S.mult[1]]), internal.FOI_sum[i - 1]);
      }
    }
    state_next[0] = day + shared.time_inc;
    state_next[1] = year_i + shared.year0 - 1;
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      state_next[i - 1 + 2] = internal.FOI_sum[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      state_next[i - 1 + shared.odin.offset.state[3]] = monty::math::max<real_type>(shared.Pmin, S[i - 1] - internal.E_new[i - 1] - internal.vacc_rate[i - 1] * S[i - 1] * internal.inv_P_nV[i - 1] + internal.dP1[i - 1] - (internal.dP2[i - 1] * S[i - 1] * internal.inv_P[i - 1]));
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 2; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.S.mult[1] + shared.odin.offset.state[3]] = monty::math::max<real_type>(shared.Pmin, S[i - 1 + (j - 1) * shared.dim.S.mult[1]] - internal.E_new[i - 1 + (j - 1) * shared.dim.E_new.mult[1]] - internal.vacc_rate[i - 1 + (j - 1) * shared.dim.vacc_rate.mult[1]] * S[i - 1 + (j - 1) * shared.dim.S.mult[1]] * internal.inv_P_nV[i - 1 + (j - 1) * shared.dim.inv_P_nV.mult[1]] + (internal.dP1[i - 1 + (j - 1) * shared.dim.dP1.mult[1]] * S[i - 1 + (j - 1 - 1) * shared.dim.S.mult[1]] * internal.inv_P[i - 1 + (j - 1 - 1) * shared.dim.inv_P.mult[1]]) - (internal.dP2[i - 1 + (j - 1) * shared.dim.dP2.mult[1]] * S[i - 1 + (j - 1) * shared.dim.S.mult[1]] * internal.inv_P[i - 1 + (j - 1) * shared.dim.inv_P.mult[1]]));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.E.mult[1] + shared.odin.offset.state[4]] = monty::math::max<real_type>(shared.Pmin, E[i - 1 + (j - 1) * shared.dim.E.mult[1]] + internal.E_new[i - 1 + (j - 1) * shared.dim.E_new.mult[1]] - internal.I_new[i - 1 + (j - 1) * shared.dim.I_new.mult[1]]);
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.I.mult[1] + shared.odin.offset.state[5]] = monty::math::max<real_type>(shared.Pmin, I[i - 1 + (j - 1) * shared.dim.I.mult[1]] + internal.I_new[i - 1 + (j - 1) * shared.dim.I_new.mult[1]] - internal.R_new[i - 1 + (j - 1) * shared.dim.R_new.mult[1]]);
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      state_next[i - 1 + shared.odin.offset.state[6]] = monty::math::max<real_type>(shared.Pmin, R[i - 1] + internal.R_new[i - 1] - internal.vacc_rate[i - 1] * R[i - 1] * internal.inv_P_nV[i - 1] - (internal.dP2[i - 1] * R[i - 1] * internal.inv_P[i - 1]));
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 2; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.R.mult[1] + shared.odin.offset.state[6]] = monty::math::max<real_type>(shared.Pmin, R[i - 1 + (j - 1) * shared.dim.R.mult[1]] + internal.R_new[i - 1 + (j - 1) * shared.dim.R_new.mult[1]] - internal.vacc_rate[i - 1 + (j - 1) * shared.dim.vacc_rate.mult[1]] * R[i - 1 + (j - 1) * shared.dim.R.mult[1]] * internal.inv_P_nV[i - 1 + (j - 1) * shared.dim.inv_P_nV.mult[1]] + (internal.dP1[i - 1 + (j - 1) * shared.dim.dP1.mult[1]] * R[i - 1 + (j - 1 - 1) * shared.dim.R.mult[1]] * internal.inv_P[i - 1 + (j - 1 - 1) * shared.dim.inv_P.mult[1]]) - (internal.dP2[i - 1 + (j - 1) * shared.dim.dP2.mult[1]] * R[i - 1 + (j - 1) * shared.dim.R.mult[1]] * internal.inv_P[i - 1 + (j - 1) * shared.dim.inv_P.mult[1]]));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      state_next[i - 1 + shared.odin.offset.state[7]] = monty::math::max<real_type>(shared.Pmin, V[i - 1] + internal.vacc_rate[i - 1] - (internal.dP2[i - 1] * V[i - 1] * internal.inv_P[i - 1]));
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 2; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.V.mult[1] + shared.odin.offset.state[7]] = monty::math::max<real_type>(shared.Pmin, V[i - 1 + (j - 1) * shared.dim.V.mult[1]] + internal.vacc_rate[i - 1 + (j - 1) * shared.dim.vacc_rate.mult[1]] + (internal.dP1[i - 1 + (j - 1) * shared.dim.dP1.mult[1]] * V[i - 1 + (j - 1 - 1) * shared.dim.V.mult[1]] * internal.inv_P[i - 1 + (j - 1 - 1) * shared.dim.inv_P.mult[1]]) - (internal.dP2[i - 1 + (j - 1) * shared.dim.dP2.mult[1]] * V[i - 1 + (j - 1) * shared.dim.V.mult[1]] * internal.inv_P[i - 1 + (j - 1) * shared.dim.inv_P.mult[1]]));
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.C.mult[1] + shared.odin.offset.state[8]] = internal.I_new[i - 1 + (j - 1) * shared.dim.I_new.mult[1]];
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.C_cu.mult[1] + shared.odin.offset.state[9]] = (flag_year == 1 ? 0 : C_cu[i - 1 + (j - 1) * shared.dim.C_cu.mult[1]] + internal.I_new[i - 1 + (j - 1) * shared.dim.I_new.mult[1]]);
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.C_annual.mult[1] + shared.odin.offset.state[10]] = (flag_year == 1 ? C_cu[i - 1 + (j - 1) * shared.dim.C_cu.mult[1]] + internal.I_new[i - 1 + (j - 1) * shared.dim.I_new.mult[1]] : 0);
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.R_cu.mult[1] + shared.odin.offset.state[11]] = (flag_year == 1 ? 0 : R_cu[i - 1 + (j - 1) * shared.dim.R_cu.mult[1]] + R[i - 1 + (j - 1) * shared.dim.R.mult[1]]);
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.R_annual.mult[1] + shared.odin.offset.state[12]] = (flag_year == 1 ? R_cu[i - 1 + (j - 1) * shared.dim.R_cu.mult[1]] + R[i - 1 + (j - 1) * shared.dim.R.mult[1]] : 0);
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.SEIR_cu.mult[1] + shared.odin.offset.state[13]] = (flag_year == 1 ? 0 : SEIR_cu[i - 1 + (j - 1) * shared.dim.SEIR_cu.mult[1]] + S[i - 1 + (j - 1) * shared.dim.S.mult[1]] + E[i - 1 + (j - 1) * shared.dim.E.mult[1]] + I[i - 1 + (j - 1) * shared.dim.I.mult[1]] + R[i - 1 + (j - 1) * shared.dim.R.mult[1]]);
      }
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.n_regions); ++i) {
      for (size_t j = 1; j <= static_cast<size_t>(shared.N_age); ++j) {
        state_next[i - 1 + (j - 1) * shared.dim.SEIR_annual.mult[1] + shared.odin.offset.state[14]] = (flag_year == 1 ? SEIR_cu[i - 1 + (j - 1) * shared.dim.SEIR_cu.mult[1]] + S[i - 1 + (j - 1) * shared.dim.S.mult[1]] + E[i - 1 + (j - 1) * shared.dim.E.mult[1]] + I[i - 1 + (j - 1) * shared.dim.I.mult[1]] + R[i - 1 + (j - 1) * shared.dim.R.mult[1]] : 0);
      }
    }
  }
};

#include <cpp11.hpp>
#include <dust2/r/discrete/system.hpp>

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model2_alloc(cpp11::list r_pars, cpp11::sexp r_time, cpp11::list r_time_control, cpp11::sexp r_n_particles, cpp11::sexp r_n_groups, cpp11::sexp r_seed, cpp11::sexp r_deterministic, cpp11::sexp r_n_threads) {
  return dust2::r::dust2_discrete_alloc<SEIRV_Model2>(r_pars, r_time, r_time_control, r_n_particles, r_n_groups, r_seed, r_deterministic, r_n_threads);
}
[[cpp11::register]]
SEXP dust2_system_SEIRV_Model2_run_to_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_run_to_time<dust2::dust_discrete<SEIRV_Model2>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model2_state(cpp11::sexp ptr, cpp11::sexp r_index_state, cpp11::sexp r_index_particle, cpp11::sexp r_index_group, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_state<dust2::dust_discrete<SEIRV_Model2>>(ptr, r_index_state, r_index_particle, r_index_group, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model2_time(cpp11::sexp ptr) {
  return dust2::r::dust2_system_time<dust2::dust_discrete<SEIRV_Model2>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model2_set_state_initial(cpp11::sexp ptr) {
  return dust2::r::dust2_system_set_state_initial<dust2::dust_discrete<SEIRV_Model2>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model2_set_state(cpp11::sexp ptr, cpp11::list r_state) {
  return dust2::r::dust2_system_set_state<dust2::dust_discrete<SEIRV_Model2>>(ptr, r_state);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model2_reorder(cpp11::sexp ptr, cpp11::integers r_index) {
  return dust2::r::dust2_system_reorder<dust2::dust_discrete<SEIRV_Model2>>(ptr, r_index);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model2_rng_state(cpp11::sexp ptr) {
  return dust2::r::dust2_system_rng_state<dust2::dust_discrete<SEIRV_Model2>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model2_set_rng_state(cpp11::sexp ptr, cpp11::sexp r_rng_state) {
  return dust2::r::dust2_system_set_rng_state<dust2::dust_discrete<SEIRV_Model2>>(ptr, r_rng_state);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model2_set_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_set_time<dust2::dust_discrete<SEIRV_Model2>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model2_update_pars(cpp11::sexp ptr, cpp11::list pars) {
  return dust2::r::dust2_system_update_pars<dust2::dust_discrete<SEIRV_Model2>>(ptr, pars);
}

[[cpp11::register]]
SEXP dust2_system_SEIRV_Model2_simulate(cpp11::sexp ptr, cpp11::sexp r_times, cpp11::sexp r_index_state, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_simulate<dust2::dust_discrete<SEIRV_Model2>>(ptr, r_times, r_index_state, preserve_particle_dimension, preserve_group_dimension);
}
